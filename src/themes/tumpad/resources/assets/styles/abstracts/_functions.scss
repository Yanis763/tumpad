// --- Reminder - Bulma's Functions list ---
// powerNumber($number, $exp) : calculates the value of a number exposed to another one. Returns a number.
// colorLuminance($color)     : defines if a color is dark or light. Return a decimal number between 0 and 1 where <= 0.5 is dark and > 0.5 is light.
// findColorInvert($color)    : returns either 70% transparent black or 100% opaque white depending on the luminance of the color.

// Palette
// (Function adpated to returns colors from bulma's $colors var)
// @param {string} $colorkey - color from $colors map
// @param {string} $tone - from [base, xx-light, x-light, light, dark, x-dark, xx-dark]
// @example : color: palette(facebook, light);
@function palette($colorkey, $tone: "base") {
    @if map-has-key($colors, $colorkey) {
        @if $tone == "xx-light" {
            @return lighten(nth(map-get($colors, $colorkey), 1), 30%);
        } @else if $tone == "x-light" {
            @return lighten(nth(map-get($colors, $colorkey), 1), 20%);
        } @else if $tone == "light" {
            @return lighten(nth(map-get($colors, $colorkey), 1), 10%);
        } @else if $tone == "base" {
            @return nth(map-get($colors, $colorkey), 1);
        } @else if $tone == "dark" {
            @return darken(nth(map-get($colors, $colorkey), 1), 10%);
        } @else if $tone == "x-dark" {
            @return darken(nth(map-get($colors, $colorkey), 1), 20%);
        } @else if $tone == "xx-dark" {
            @return darken(nth(map-get($colors, $colorkey), 1), 30%);
        } @else {
            @warn 'Please provide a default tone : xx-light, x-light, light, base, dark, x-dark, xx-dark';
            @return nth(map-get($colors, $colorkey), 1);
        }
    } @else {
        @warn 'Unfortunately, no palette value could be retrieved from `#{$colorkey}`. '
        + 'Please make sure it is defined in `$colors` map.';
        @return null;
    }
}
